// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	ml "github.com/kgmedia-data/gaia/pkg/ml"
	mock "github.com/stretchr/testify/mock"
)

// ISummaryML is an autogenerated mock type for the ISummaryML type
type ISummaryML struct {
	mock.Mock
}

// BatchSummarize provides a mock function with given fields: language, minSentences, maxSentences, input
func (_m *ISummaryML) BatchSummarize(language string, minSentences int, maxSentences int, input []ml.Summary) ([]ml.Summary, error) {
	ret := _m.Called(language, minSentences, maxSentences, input)

	if len(ret) == 0 {
		panic("no return value specified for BatchSummarize")
	}

	var r0 []ml.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int, []ml.Summary) ([]ml.Summary, error)); ok {
		return rf(language, minSentences, maxSentences, input)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, []ml.Summary) []ml.Summary); ok {
		r0 = rf(language, minSentences, maxSentences, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ml.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int, []ml.Summary) error); ok {
		r1 = rf(language, minSentences, maxSentences, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISummaryML creates a new instance of ISummaryML. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISummaryML(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISummaryML {
	mock := &ISummaryML{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
